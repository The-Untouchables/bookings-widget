myConnection:  NativeConnection {
  base:
   Mongoose {
     connections: [ [NativeConnection], [Circular] ],
     models: { Bookings: [Function] },
     modelSchemas: { Bookings: [Schema] },
     options: { pluralization: true },
     _pluralize: [Function: pluralize],
     plugins: [ [Array], [Array], [Array], [Array] ] },
  collections: {},
  models: {},
  config: { autoIndex: true },
  replica: false,
  hosts: null,
  host: 'localhost',
  port: 27017,
  user: null,
  pass: null,
  name: 'airbnb_bookings',
  options: null,
  otherDbs: [],
  states:
   { '0': 'disconnected',
     '1': 'connected',
     '2': 'connecting',
     '3': 'disconnecting',
     '99': 'uninitialized',
     disconnected: 0,
     connected: 1,
     connecting: 2,
     disconnecting: 3,
     uninitialized: 99 },
  _readyState: 2,
  _closeCalled: false,
  _hasOpened: false,
  _listening: false,
  _connectionOptions: { promiseLibrary: [Function: Promise] },
  '$initialConnection': Promise { <pending> },
  then: [Function],
  catch: [Function] }


  BookingModel:  Query {
  _mongooseOptions: {},
  mongooseCollection:
   NativeCollection {
     collection: null,
     opts:
      { bufferCommands: true,
        capped: false,
        '$wasForceClosed': undefined },
     name: 'bookings',
     collectionName: 'bookings',
     conn:
      NativeConnection {
        base: [Mongoose],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        hosts: null,
        host: null,
        port: null,
        user: null,
        pass: null,
        name: null,
        options: null,
        otherDbs: [],
        states: [Object],
        _readyState: 0,
        _closeCalled: false,
        _hasOpened: false,
        _listening: false },
     queue: [],
     buffer: true,
     emitter:
      EventEmitter {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined } },
  model:
   { [Function: model]
     hooks: Kareem { _pres: [Object], _posts: [Object] },
     base:
      Mongoose {
        connections: [Array],
        models: [Object],
        modelSchemas: [Object],
        options: [Object],
        _pluralize: [Function: pluralize],
        plugins: [Array] },
     modelName: 'Bookings',
     model: [Function: model],
     db:
      NativeConnection {
        base: [Mongoose],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        hosts: null,
        host: null,
        port: null,
        user: null,
        pass: null,
        name: null,
        options: null,
        otherDbs: [],
        states: [Object],
        _readyState: 0,
        _closeCalled: false,
        _hasOpened: false,
        _listening: false },
     discriminators: undefined,
     '$appliedMethods': true,
     '$appliedHooks': true,
     schema:
      Schema {
        obj: [Object],
        paths: [Object],
        aliases: {},
        subpaths: {},
        virtuals: {},
        singleNestedPaths: {},
        nested: {},
        inherits: {},
        callQueue: [],
        _indexes: [],
        methods: {},
        statics: {},
        tree: [Object],
        query: {},
        childSchemas: [],
        plugins: [Array],
        s: [Object],
        _userProvidedOptions: undefined,
        options: [Object],
        '$globalPluginsApplied': true },
     collection:
      NativeCollection {
        collection: null,
        opts: [Object],
        name: 'bookings',
        collectionName: 'bookings',
        conn: [NativeConnection],
        queue: [],
        buffer: true,
        emitter: [EventEmitter] },
     Query: { [Function] base: [Query] },
     '$__insertMany': [Function],
     '$init': Promise { <pending>, catch: [Function] } },
  schema:
   Schema {
     obj:
      { id: [Function: Number],
        city: [Function: String],
        has_availability: [Function: Boolean],
        min_nights: [Function: Number],
        max_nights: [Function: Number],
        native_currency: [Function: String],
        person_capacity: [Function: Number],
        price: [Function: Number],
        listing_weekend_price_native: [Function: Number],
        cleaning_fee_native: [Function: Number],
        star_rating: [Function: Number],
        listing_price_for_extra_person_native: [Function: Number],
        daysAvailable: [Function: Array] },
     paths:
      { id: [SchemaNumber],
        city: [SchemaString],
        has_availability: [SchemaBoolean],
        min_nights: [SchemaNumber],
        max_nights: [SchemaNumber],
        native_currency: [SchemaString],
        person_capacity: [SchemaNumber],
        price: [SchemaNumber],
        listing_weekend_price_native: [SchemaNumber],
        cleaning_fee_native: [SchemaNumber],
        star_rating: [SchemaNumber],
        listing_price_for_extra_person_native: [SchemaNumber],
        daysAvailable: [SchemaArray],
        _id: [ObjectId],
        __v: [SchemaNumber] },
     aliases: {},
     subpaths: {},
     virtuals: {},
     singleNestedPaths: {},
     nested: {},
     inherits: {},
     callQueue: [],
     _indexes: [],
     methods: {},
     statics: {},
     tree:
      { id: [Function: Number],
        city: [Function: String],
        has_availability: [Function: Boolean],
        min_nights: [Function: Number],
        max_nights: [Function: Number],
        native_currency: [Function: String],
        person_capacity: [Function: Number],
        price: [Function: Number],
        listing_weekend_price_native: [Function: Number],
        cleaning_fee_native: [Function: Number],
        star_rating: [Function: Number],
        listing_price_for_extra_person_native: [Function: Number],
        daysAvailable: [Function: Array],
        _id: [Object],
        __v: [Function: Number] },
     query: {},
     childSchemas: [],
     plugins: [ [Object], [Object], [Object], [Object], [Object] ],
     s: { hooks: [Kareem] },
     _userProvidedOptions: undefined,
     options:
      { typeKey: 'type',
        id: true,
        noVirtualId: false,
        _id: true,
        noId: false,
        validateBeforeSave: true,
        read: null,
        shardKey: null,
        autoIndex: null,
        minimize: true,
        discriminatorKey: '__t',
        versionKey: '__v',
        capped: false,
        bufferCommands: true,
        strict: true,
        pluralization: true },
     '$globalPluginsApplied': true },
  op: 'find',
  options: {},
  _conditions: {},
  _fields: undefined,
  _update: undefined,
  _path: undefined,
  _distinct: undefined,
  _collection:
   NodeCollection {
     collection:
      NativeCollection {
        collection: null,
        opts: [Object],
        name: 'bookings',
        collectionName: 'bookings',
        conn: [NativeConnection],
        queue: [],
        buffer: true,
        emitter: [EventEmitter] },
     collectionName: 'bookings' },
  _traceFunction: undefined }